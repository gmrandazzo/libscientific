cmake_minimum_required(VERSION 3.17)
project(libscientific LANGUAGES C)
set(AUTHOR "Giuseppe Marco Randazzo")
set(VERSION_MAJOR 1)
set(VERSION_MINOR 6)
set(VERSION_PATCH 1)
configure_file(src/scientificconfig.h.in scientificconfig.h)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build, options are: Debug Release" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

if(NOT CMAKE_INSTALL_PREFIX)
  message(SEND_ERROR "Please specify the installation prefix -DCMAKE_INSTALL_PREFIX=...")
endif()

string(TOLOWER "${CMAKE_BUILD_TYPE}" cmake_build_type_tolower)

find_package(LAPACK REQUIRED)
find_package(SQLite3 REQUIRED)

if(PORTABLE_PYTHON_PACKAGE)
  message(STATUS "Add binary libraries to the python ffi package")
endif()

if(LAPACK_FOUND)
  message(STATUS "Build libscientific using system lapack library")
else()
  message(STATUS "Build libscientific using local lapack source code")
  project(libscientific C Fortran)
  get_filename_component (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)
  set(CMAKE_Fortran_FLAGS_RELEASE "-funroll-all-loops -fno-f2c -O3")
  set(CMAKE_Fortran_FLAGS_DEBUG   "-fno-f2c -O0 -g")
endif()

if(WIN32)
  message(STATUS "Build Release: WIN32")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -D_GNU_SOURCE -O2 -pipe -mwindows -pedantic -Wall -DWIN32")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -s -Wl,-O1")
elseif(APPLE)
  if(cmake_build_type_tolower STREQUAL "debug")
    message(STATUS "Build Debug: APPLE")
    set(CMAKE_C_FLAGS "-std=c99 -D_GNU_SOURCE -O0 -pedantic -Wall -g -fprofile-arcs -ftest-coverage -Wno-strict-prototypes")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static -pthread")
  else()
    message(STATUS "Build Release: APPLE")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -D_GNU_SOURCE -O2 -pipe -Wall")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}  -static -pthread")
  endif()
else(NOT WIN32)
  if(cmake_build_type_tolower STREQUAL "debug")
    set(CMAKE_BUILD_TYPE "Debug")
    message(STATUS "Build Debug: Linux")
    set(CMAKE_C_FLAGS "-std=c99 -D_GNU_SOURCE -O0 -pedantic -Wall -g -pthread -fprofile-arcs -ftest-coverage")
    set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
  else()
    message(STATUS "Build Release: Linux")
    set(CMAKE_BUILD_TYPE "Release")
      if(NOT CMAKE_C_FLAGS)
        set(CMAKE_C_FLAGS "-std=c99 -D_GNU_SOURCE -O3 -Wall -g -pthread")
      endif()
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-O1")
  endif()
endif(WIN32)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")

if(cmake_build_type_tolower STREQUAL "debug")
  include(Dart)
  cmake_policy(SET CMP0145 OLD)
  enable_testing()
endif()

include(GNUInstallDirs)
include_directories(${PROJECT_BINARY_DIR} ${SQLite3_INCLUDE_DIRS})

add_subdirectory(src)
add_subdirectory(src/tests)

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake" IMMEDIATE @ONLY)
add_custom_target(uninstall "${CMAKE_COMMAND}" -P
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
